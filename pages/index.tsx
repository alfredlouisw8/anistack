import { gql, useQuery } from "@apollo/client";
import { Anime } from "@prisma/client";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";

const AllAnimesQuery = gql`
	query allAnimesQuery($first: Int, $after: ID) {
		animes(first: $first, after: $after) {
			pageInfo {
				endCursor
				hasNextPage
			}
			edges {
				cursor
				node {
					thumbnail
					title
					description
					id
				}
			}
		}
	}
`;

const Home: NextPage = () => {
	const { data, loading, error, fetchMore } = useQuery(AllAnimesQuery, {
		variables: { first: 2 },
	});

	if (loading) return <p>Loading...</p>;
	if (error) return <p>Oh no... {error.message}</p>;

	const { endCursor, hasNextPage } = data?.animes.pageInfo;

	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="container mx-20 my-20">
				<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
					{data?.animes.edges.map(({ node }: { node: Anime }) => (
						<div
							key={node.id}
							className="shadow rounded-lg inline-grid grid-cols-[185px_auto] h-[265px] min-w-[370px] overflow-hidden relative"
						>
							<div className="flex flex-col justify-end relative">
								<Image
									src={node.thumbnail}
									alt={node.title}
									style={{ objectFit: "cover" }}
									fill
								/>
								<div className="bg-gray-700/80 z-10 p-4">
									<p className="font-bold text-sm text-white">{node.title}</p>
								</div>
							</div>
							<div className="overflow-x-hidden overflow-y-auto p-4">
								<p className="text-lg font-medium">{node.title}</p>
								<p className="text-gray-600">{node.description}</p>
							</div>
						</div>
					))}
				</div>
				{hasNextPage ? (
					<button
						className="px-4 py-2 bg-blue-500 text-white rounded my-10"
						onClick={() => {
							fetchMore({
								variables: { after: endCursor },
								updateQuery: (prevResult, { fetchMoreResult }) => {
									fetchMoreResult.animes.edges = [
										...prevResult.animes.edges,
										...fetchMoreResult.animes.edges,
									];
									return fetchMoreResult;
								},
							});
						}}
					>
						more
					</button>
				) : (
					<p className="my-10 text-center font-medium">
						You've reached the end!{" "}
					</p>
				)}
			</div>
		</div>
	);
};

export default Home;
